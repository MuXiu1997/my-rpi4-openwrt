name: Rpi4

on:
  workflow_dispatch:

jobs:

  build_packages:
    name: Build Rpi4 packages
    runs-on: ubuntu-latest
    env:
      DEVICE: rpi4
      BRANCH: master

    steps:

      - name: Cache ib
        id: cache-ib
        uses: actions/cache@v3
        with:
          path: ~/ib-${{ env.DEVICE }}.tar.xz
          key: ${{ runner.os }}-ib-${{ env.DEVICE }}

      - name: Space cleanup
        if: steps.cache-ib.outputs.cache-hit != 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          nohup sh -c '
          sudo sysctl vm.swappiness=0
          sudo apt update;
          sudo apt -qq -y --no-install-recommends install pv jq \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
          libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs \
          nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
          python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
          texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          ' &
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /opt/hostedtoolcache

      - uses: actions/checkout@v2
        if: steps.cache-ib.outputs.cache-hit != 'true'
        with:
          fetch-depth: 1

      - name: Checkout
        if: steps.cache-ib.outputs.cache-hit != 'true'
        run: |
          cd
          curl -sL https://raw.githubusercontent.com/stupidloud/nanopi-openwrt/zstd-bin/zstd | sudo tee /usr/bin/zstd > /dev/null
          sudo chown $USER:$(id -gn) /mnt
          truncate -s 30g /mnt/lede.img && mkfs.btrfs -M /mnt/lede.img
          LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
          sudo losetup -P --direct-io $LOOP_DEVICE /mnt/lede.img
          mkdir lede && sudo mount -o nossd,compress=zstd $LOOP_DEVICE lede
          if [ -d 'lede/.git' ]; then
          cd lede && rm -f zerospace && git config --local user.email "action@github.com" && git config --local user.name "GitHub Action"
          git fetch && git reset --hard origin/$BRANCH && git clean -df
          else
          sudo chown $USER:$(id -gn) lede && git clone -b $BRANCH --single-branch https://github.com/coolsnowwolf/lede lede
          fi

      - name: Update feeds and packages
        if: steps.cache-ib.outputs.cache-hit != 'true'
        run: |
          cd ~/lede
          rm -rf ./tmp && rm -rf ./feeds && rm -rf ./pacakges/feeds
          if [ -d 'feeds' ]; then
            pushd feeds/packages; git restore .; popd
            pushd feeds/luci; git restore .; popd
            pushd feeds/routing; git restore .; popd
            pushd feeds/telephony; git restore .; popd
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          . $GITHUB_WORKSPACE/scripts/merge_packages.sh
          . $GITHUB_WORKSPACE/scripts/patches.sh
          cd
          git clone --depth=1 --single-branch https://github.com/openwrt/luci
          pushd luci
          ls -d */ | xargs -ri diff -q {} ../lede/feeds/luci/{} | grep Only | grep lede | grep -E applications\|themes | awk '{print $4}' | xargs -ri echo CONFIG_PACKAGE_{}=m > ~/lede/more_luci.txt
          popd

      - name: Custom configure file
        if: steps.cache-ib.outputs.cache-hit != 'true'
        run: |
          cd ~/lede && rm -rf tmp/
          cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | sed 's/\(CONFIG_PACKAGE_luci-app-[^A-Z]*=\)y/\1m/' > .config
          find package/ -type d -name luci-app-* | rev | cut -d'/' -f1 | rev | xargs -ri echo CONFIG_PACKAGE_{}=m >> .config
          cat $GITHUB_WORKSPACE/extra_packages.seed >> .config
          cat more_luci.txt >> .config
          [ -f .config_fix ] && cat .config_fix >> .config
          make defconfig && sed -i -E 's/# (CONFIG_.*_COMPRESS_UPX) is not set/\1=y/' .config && make defconfig
          cat .config

      - name: Clean build cache
        if: steps.cache-ib.outputs.cache-hit != 'true'
        run: |
          cd ~/lede
          df -h .
          make clean || true
          df -h .
      - name: Build and deploy packages
        if: steps.cache-ib.outputs.cache-hit != 'true'
        timeout-minutes: 1440
        run: |
          ulimit -SHn 65000
          cd ~/lede
          while true; do make download -j && break || true; done
          make -j$[`nproc`+1] IGNORE_ERRORS=1 tools/compile toolchain/compile buildinfo target/compile package/compile package/install target/install
          if [ ! -e ~/lede/bin/targets/*/*/*imagebuilder*xz ]; then make IGNORE_ERRORS=1 V=sc; fi
          mv `ls ~/lede/bin/targets/*/*/*imagebuilder*xz` ~/ib-$DEVICE.tar.xz

          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        if: steps.cache-ib.outputs.cache-hit != 'true'
        run: |
          cd
          mkdir -p ./artifact/buildinfo
          cd lede
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          cp -rf .config ../artifact/buildinfo/
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV
          cd ..
          mv artifact $GITHUB_WORKSPACE
      - name: Clean build cache
        if: steps.cache-ib.outputs.cache-hit != 'true'
        run: |
          cd ~/lede
          df -h .
          make clean
          rm -rf bin tmp
          df -h .

      - name: Deliver buildinfo
        if: ${{ github.event.client_payload.package_clean == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver ib
        uses: actions/upload-artifact@v4
        with:
          name: ib-${{ env.DEVICE }}
          path: ~/ib-${{ env.DEVICE }}.tar.xz


  generate_slim_firmware:
    needs: build_packages
    name: Generate Rpi4 slim firmware
    runs-on: ubuntu-latest
    env:
      DEVICE: rpi4

    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v4
        with:
          name: ib-${{ env.DEVICE }}
          path: ~/

      - name: Generate firmware
        run: |
          sudo apt update && sudo apt install qemu-utils
          sudo sysctl vm.swappiness=0
          ulimit -SHn 65000
          cat ~/ib-$DEVICE.tar.xz | tar -Jxvf -
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/scripts/merge_files.sh
          mkdir -p files/local_feed && sudo mount --bind packages files/local_feed
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          ls packages/*.ipk | xargs -n1 basename > package.files
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | grep CONFIG_PACKAGE | grep '=y' | grep -v CONFIG_PACKAGE_luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs -ri grep -o {} package.files | sort -u | xargs echo)
          PACKAGES="$PACKAGES `grep -o luci-i18n-opkg-zh-cn package.files || true`"
          PACKAGES="$PACKAGES luci-app-openclash"
          PACKAGES="$PACKAGES netdata luci-app-netdata luci-i18n-netdata-zh-cn"
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"

          mkdir -p $GITHUB_WORKSPACE/release
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-slim.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-slim.img.gz > $DEVICE-slim.img.gz.md5
          gzip -dc $DEVICE-slim.img.gz | md5sum | sed "s/-/$DEVICE-slim.img/" > $DEVICE-slim.img.md5
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}} 编译
